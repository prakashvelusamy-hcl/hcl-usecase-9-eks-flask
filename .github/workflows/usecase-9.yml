name: Terraform Apply and Destroy

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - destroy
          - apply


permissions:
      id-token: write
      contents: write
jobs:
  terraform:
    name: Docker Build + Terraform Apply/Destroy
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME_FLASK: flask-app
      AWS_REGION: ap-south-1
      DOCKER_DIR_FLASK: Api-Flask
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version
      - name: Run TFLint
        run: tflint --init && tflint -f compact
        working-directory: ./
      - name: Install Checkov
        run: |
          pip install checkov

      - name: Run Checkov to Analyze Terraform Code
        run: |
          checkov -d ./
          #checkov -d . --terraform --skip-check CKV_AWS_23 --skip-check CKV_AWS_24 # Optional: skip checks if needed
        continue-on-error: true
        
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::495599733393:role/OIDC
          # role-to-assume: ${{ secrets.AWS_SECRET }}
          aws-region: ap-south-1


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR Repositories Exist
        run: |
          aws ecr describe-repositories --repository-names "$IMAGE_NAME_FLASK" || \
          aws ecr create-repository --repository-name "$IMAGE_NAME_APPOINTMENT"

      
      # Build, tag, and push for appointment image
      - name: Build Appointment Docker image
        run: docker build -t $IMAGE_NAME_APPOINTMENT -f ${{ env.DOCKER_DIR_FLASK }}/Dockerfile ${{ env.DOCKER_DIR_FLASK }}
      
      - name: Tag Appointment Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker tag $IMAGE_NAME_FLASK:latest $ECR_REGISTRY/$IMAGE_NAME_FLASK:v1
      
      - name: Push Appointment Docker image to ECR
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker push $ECR_REGISTRY/$IMAGE_NAME_FLASK:v1
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0
      - name: Format Terraform code
        run: terraform fmt -recursive

      - name: Terraform Init
        run: terraform init

      - name: Terraform validate 
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan
      - name: Install Terraform Docs
        run: |
          wget https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-linux-amd64.tar.gz         
          tar -xvzf terraform-docs-v0.16.0-linux-amd64.tar.gz
          pwd     
          mv terraform-docs /usr/local/bin/

      - name: Verify Terraform Docs Installation
        run: terraform-docs --version
      - name: Generate Terraform Docs
        run: |
          terraform-docs markdown table ./ > README.md

      - name: Commit Terraform Docs
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add README.md
          git commit -m "Update Terraform docs [skip ci]" || echo "No changes to commit"
          git push


      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve 

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve 
